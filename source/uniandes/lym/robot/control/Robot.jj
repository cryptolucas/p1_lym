/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=40; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;

import java.util.LinkedList;
import java.util.HashMap;
import java.util.ArrayList;


@SuppressWarnings("serial")
public class Robot 
{

	private static HashMap<String, Integer> variables = new HashMap<>();
	private static ArrayList<String> defprocs = new ArrayList<>(); 
	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: /* Nombres de Comandos */
{

			<MOV:  "Mov">
		| 	<RIGHT: "RIGHT">
		| 	<PUT: "Put">
		| 	<PICK: "Pick">
		|  < POP: "Pop" >
		|  <GO: "GO" >
        |  < HOP:  "HOP" >
        | < JUMP: "Jump" >	

}

TOKEN:
{
		<BALLOONS:  "BALLOONS" >
		|	<CHIPS:     "CHIPS"  >
		|  < DEFVAR: "defVar" >
		|  < DEFPROC: "defProc" >

}

TOKEN:
{

  < FACING: "facing" >
|  <  CAN: "can" >
|  < NOT: "not" >
}

TOKEN:
{

  < NORTH: "north" >
|  <  EAST: "east" >
|  < WEST: "west" >
|  < SOUTH: "south" >
}

TOKEN:
{
	< IF: "if" >
|   < ELSE: "else" >
|  < WHILE: "while" >
|  < REPEAT: "repeat" >
|  < TIMES: "times" >
  
}


TOKEN :
{
     <NUM: (<DIGIT>)+ >
|   < #LETTER : ["a" - "z" , "A" - "Z"] >  
|  	<#DIGIT: ["0"-"9"] >
|   < CADENA : ( <LETTER> ) ( < LETTER > | < DIGIT >)* >

        
}



	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{	
		
		int x,y;
		salida=new String();	
	}

	
	{
		(		  		  (
		   
		While()
		| IF()
		| <RIGHT> "(" ")" {world.turnRight();salida = "Command: Turnright";}
		| 	<MOV>  "(" (x=num()|x=CallVariable()) ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
		| 	<HOP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
		| 	<GO>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:GO ";}  
		|  <PUT> "("  put() ")"					  			
		|  <PICK> "(" get()  ")"	
	    |  < POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
	    |  <JUMP>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command: Jump ";}
	    | Can()
		|  createVariable()
		| Facing()
		
		
		
		
	    
		)

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false; } 
	}




	




	void createVariable() :
	{
		String key;
		int value; 	
	}
	{
		( < DEFVAR > key=name() value= num() ) {  variables.put(key,value); }		  

	}

	int CallVariable():
	{
		String key;
	}
	{
		key = name()
		{
		  if (variables.containsKey(key) == false) 
		    throw new ParseException ("No se ha declarado la variable");
		    
         
		  else
		     
		   return variables.get(key);
		
		  
		}
	  
	}

	
	String TokensCommand():
	{
	}
	{
	  (	    
		< RIGHT >
	|   < JUMP >
	|   < GO >
	|   < MOV >
				)
	{
	  
	  
	  return token.image;
	  
	}
	}


	ArrayList<String> ArrayComando():
	{
  	ArrayList<String> comando = new ArrayList<>();
  	String z;
  	int x, y;
	}
	{
  		(z = TokensCommand() "("  x = num() ")" ";")
  	{
    	String numero = Integer.toString(x);
    	comando.add(z);
    	comando.add(numero);
    	
  	}
  		| (z = TokensCommand() "(" x = num() "," y = num() ")" ";")
  	{
    	 if (comando.isEmpty()) {
            // Si está vacío, entonces seleccionamos la segunda alternativa
            String numero1 = Integer.toString(x);
            String numero2 = Integer.toString(y);
            comando.add(z);
            comando.add(numero1);
            comando.add(numero2);
        }
    	
  	}

 	{ System.out.println(comando); return comando; }
  
}

	
	


	ArrayList<ArrayList<String>> ArrayBlock():
	{
		ArrayList<ArrayList<String>> lista_mayor = new ArrayList<>();
		ArrayList<String> comando = new ArrayList<>();
	}
	{
		(comando = ArrayComando())+ { lista_mayor.add(comando); }

		{return lista_mayor; }
		  
	}


	void RunBlock(ArrayList<ArrayList<String>> arrblock):
	{
		
		int numero1 = 0;
		int numero2 = 0;
	}
	{
	  {
			for (ArrayList<String> arr: arrblock) {
			  
				String comando = arr.get(0);
				if(arr.size() == 2) { 
					numero1 = Integer.parseInt(arr.get(1));
					if (comando.equals("Mov")) 
					world.moveForward(numero1,false);
					 }
				if(arr.size() == 3) { 
					numero1 = Integer.parseInt(arr.get(1));
					numero2 = Integer.parseInt(arr.get(2));
					if (comando.equals("GO")) 
					world.setPostion(numero1,numero2); 


					 }
				
		

			}

	  }
	}

	


	
	void IF():
	
	{
		boolean x;
		ArrayList<ArrayList<String>> i, j;
		
	}
	
	{
 	 	< IF > (x=Facing()|x=Can()) "{" i = ArrayBlock() "}" < ELSE >  "{" j = ArrayBlock() "}"
	{
  		if (x == true) { 
  			RunBlock(i);
  			 return;}
  			 
  		else { 
  			RunBlock(j);
  			 return;}
  			
 	}

	}

	

	void While():
	{
	  boolean x;
	  ArrayList<ArrayList<String>> j;
	}
	
	{
		< WHILE > (x=Facing()|x=Can())  "{" j = ArrayBlock() "}"

		{
		  if(x==true)
		  RunBlock(j);
		}
	  
	}

	void Repeat():
	{
	  int x;
	  ArrayList<ArrayList<String>> j;
	}
	{
		<REPEAT> x=num() < TIMES > "{" j=ArrayBlock() "}"

		{
		  for (int i = 1; i <= x; i++) {

		    RunBlock(j);
		  }
		}
	  
	}


	void CreateDefprocSinParam():
	{

	  Arraylist
	  String name;
	  int x,y;
	  ArrayList<ArrayList<String>> j;
	}
	{
		< DEFPROC > name = name() "(" ")"   "{" j=ArrayBlock() "}"

		
		
	}


	
	
  			
  		 
	







	boolean Facing(): 
	{
		String coordenada = null;
		String x;
	}
	{
		( < FACING > "(" x = direction() ")" ) 
	{
	  if (world.facingNorth() == true)
	  	coordenada = "north";
	  else if (world.facingSouth() == true)
	  	coordenada = "south";
	  else if (world.facingWest() == true)
	  	coordenada = "west";
	  else if (world.facingEast() == true)
	  	coordenada = "east";

	  if (coordenada.equals(x)) {
	  	return true;
	 }

	  else {
	  
	   return false;
	  }
	 
    }
	}

	

	String direction(): { }
	{
		(< NORTH >| < EAST >| < WEST >|< SOUTH >)
	{
	  
		return token.image;
	}
	}





	boolean Can():
     {
      int x,y;
      double hor, ver;
      int Nput;
      int chipsOrBalloons;
      
	 }
	{
	  	 (	  	   
	  	
	     < CAN > "(" <MOV>  "(" (x=num()|x=CallVariable()) ")" ")"
	    
	    {  int direction = world.getFacing();
	    	Point punto = world.getPosition();
	    	int coordenada_x = (int) punto.getX();
	    	int coordenada_y = (int) punto.getY();
	    	
	    	if (direction == 0 || direction == 1) {
	    	 coordenada_y += x;

	   }
	   		else if (direction == 2 || direction == 3) {
	   		  
	    	coordenada_x += x;
	    }
	    {
	      	Point p = new Point(coordenada_x, coordenada_y);
	      	
			if (world.isBlocked(p) == true) {
			    System.out.println("false");
				return false;
				
		}
			else
			System.out.println("true");
			return true;
		}
	}
	    	
		| < CAN > "(" <HOP>  "(" (x=num()|x=CallVariable()) ")" ")"

		{  int direction = world.getFacing();
	    	Point punto = world.getPosition();
	    	int coordenada_x = (int) punto.getX();
	    	int coordenada_y = (int) punto.getY();
	    	
	    	if (direction == 0 || direction == 1) {
	    	 coordenada_y += x;

	   }
	   		else if (direction == 2 || direction == 3) {
	   		  
	    	coordenada_x += x;
	    }
	    {
	      	Point p = new Point(coordenada_x, coordenada_y);
	      	
			if (world.isBlocked(p) == true)
				return false;
			else
			return true;
		}
	}
		
		| < CAN >	"("  <GO>  "(" (x=num()|x=CallVariable()) "," (y=num()|y=CallVariable())")" ")"
		
		{ Point punto = new Point(x,y);
			if (world.isBlocked(punto) == true)
				return false;
		}
		
		|  < CAN > "(" <PUT> "(" chipsOrBalloons = ChipsOrBalloons() Nput = Nput() ")" ")"
		{
			if (chipsOrBalloons == 1) {
			  int chips = world.getMyChips();
			  if (chips < Nput) 
			  	return false; }

			else if   (chipsOrBalloons == 2) {
			  int balloons = world.getMyBalloons();
			  if (balloons < Nput) 
			  	return false; }
				
		}
						  			
		| < CAN > "(" <PICK> "("  chipsOrBalloons = ChipsOrBalloons() Nput = Nput() ")" ")"

		{
			if (chipsOrBalloons == 1) {
			  if (world.chipExists() == false) 
			  	return false; }

			else if   (chipsOrBalloons == 2) {
			  int balloons = world.countBalloons();
			  if (balloons < Nput) 
			  	return false; }

		}	
	    |  < CAN > "(" < POP > "(" (x=num()|x=CallVariable()) ")" ")"

	    {
			if (world.countBalloons() == 0)
				return false;
	      
	    }
	    |  < CAN > "(" <JUMP>  "(" (x=num()|x=CallVariable())")" ")"

			)
		{
		  return true;
	}
	}
	
	
	
	int Nput():
   {
	int f;
   }
   {
		( "," f=num() )
	{
	  return f;
	}
	}



	int ChipsOrBalloons() :
	{
  	Token t;
	}
	{
  		t = <CHIPS> | t = <BALLOONS>
  	{
    if (t.kind == CHIPS) {
      return 1;
    } else if (t.kind == BALLOONS) {
      return 2;
    }
  		}
	}


	
	


	

	
	 
	String name(): { }
{

	(
	  < CADENA >
	)
	{ 
		return token.image;
	}

}

	
	
	




	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}



	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}

	